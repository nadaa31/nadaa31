{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cd4ed3ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.metrics import mean_absolute_percentage_error, mean_absolute_error, mean_squared_error\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "9bb95ce5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>chlorophyll</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>degrees_north</td>\n",
       "      <td>degrees_east</td>\n",
       "      <td>mg m-3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>54.1875</td>\n",
       "      <td>7.854172</td>\n",
       "      <td>40.513763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>54.1875</td>\n",
       "      <td>7.854172</td>\n",
       "      <td>34.596703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>54.1875</td>\n",
       "      <td>7.854172</td>\n",
       "      <td>29.360538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>54.1875</td>\n",
       "      <td>7.854172</td>\n",
       "      <td>25.35229</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        latitude     longitude chlorophyll\n",
       "0  degrees_north  degrees_east      mg m-3\n",
       "1        54.1875      7.854172   40.513763\n",
       "2        54.1875      7.854172   34.596703\n",
       "3        54.1875      7.854172   29.360538\n",
       "4        54.1875      7.854172    25.35229"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('data sat - Copy.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "b39de414",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>chlorophyll</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>54.1875</td>\n",
       "      <td>7.854172</td>\n",
       "      <td>40.513763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>54.1875</td>\n",
       "      <td>7.854172</td>\n",
       "      <td>34.596703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>54.1875</td>\n",
       "      <td>7.854172</td>\n",
       "      <td>29.360538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>54.1875</td>\n",
       "      <td>7.854172</td>\n",
       "      <td>25.35229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>54.1875</td>\n",
       "      <td>7.854172</td>\n",
       "      <td>24.834644</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  latitude longitude chlorophyll\n",
       "1  54.1875  7.854172   40.513763\n",
       "2  54.1875  7.854172   34.596703\n",
       "3  54.1875  7.854172   29.360538\n",
       "4  54.1875  7.854172    25.35229\n",
       "5  54.1875  7.854172   24.834644"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[1:]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "05f56cba",
   "metadata": {},
   "outputs": [],
   "source": [
    "df= df['chlorophyll']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "2df1e648",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.astype('float64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "63a5a523",
   "metadata": {},
   "outputs": [],
   "source": [
    "Ntest = int(np.floor(len(df)*.2))\n",
    "\n",
    "T = 15\n",
    "\n",
    "train = df.iloc[:-Ntest]\n",
    "test = df.iloc[-Ntest:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "f3433bff",
   "metadata": {},
   "outputs": [],
   "source": [
    "series = df.to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "fc036a01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X.shape (380, 15) Y.shape (380,)\n"
     ]
    }
   ],
   "source": [
    "X = []\n",
    "Y = []\n",
    "for t in range(len(series) - T):\n",
    "    x = series[t:t+T]\n",
    "    X.append(x)\n",
    "    y = series[t+T]\n",
    "    Y.append(y)\n",
    "\n",
    "X = np.array(X).reshape(-1, T)\n",
    "Y = np.array(Y)\n",
    "N = len(X)\n",
    "print(\"X.shape\", X.shape, \"Y.shape\", Y.shape)\n",
    "Xtrain, Ytrain = X[:-Ntest], Y[:-Ntest]\n",
    "Xtest, Ytest = X[-Ntest:], Y[-Ntest:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dceb7a60",
   "metadata": {},
   "source": [
    "### Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "e692fb5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "53feb947",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.fit(Xtrain, Ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "ef4f0d0c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.64, 2.62, 2.63, 2.63, 2.62, 2.62, 2.61, 2.59, 2.59, 2.58, 2.57,\n",
       "       2.57, 2.56, 2.55, 2.54, 2.54, 2.53, 2.53, 2.53, 2.51, 2.49, 2.49,\n",
       "       2.47, 2.46, 2.46, 2.46, 2.44, 2.42, 2.42, 2.41, 2.41, 2.4 , 2.38,\n",
       "       2.37, 2.38, 2.36, 2.33, 2.31, 2.32, 2.31, 2.31, 2.29, 2.25, 2.24,\n",
       "       2.25, 2.24, 2.24, 2.2 , 2.17, 2.17, 2.18, 2.15, 2.12, 2.13, 2.12,\n",
       "       2.1 , 2.11, 2.09, 2.07, 2.04, 2.02, 2.03, 2.03, 1.99, 1.97, 1.94,\n",
       "       1.92, 1.88, 1.87, 1.83, 1.8 , 1.8 , 1.79, 1.73, 1.66, 1.64, 1.59,\n",
       "       1.55, 1.49])"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred = lr.predict(Xtest)\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "6368aa90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9882690909685191"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "cbf399fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0011471605347056818"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "6ed5845b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.02593661834471621"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "eca0152c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.013206693618534207"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_percentage_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "502dffb7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse: 0.03386975840931969\n"
     ]
    }
   ],
   "source": [
    "print('rmse: {}'.format(math.sqrt(mean_squared_error(Ytest, pred))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "9216b0b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x20618da7730>"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(Ytest, color='blue', label='True Values')\n",
    "plt.plot(pred, color='red', label='Predicted Values')\n",
    "plt.legend(loc='best')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22330cbc",
   "metadata": {},
   "source": [
    "### SVR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "7c1876e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVR()"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVR\n",
    "regressor = SVR(kernel = 'rbf')\n",
    "regressor.fit(Xtrain, Ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "6a265aca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.78, 2.78, 2.77, 2.77, 2.77, 2.76, 2.76, 2.76, 2.75, 2.75, 2.75,\n",
       "       2.74, 2.74, 2.74, 2.73, 2.73, 2.73, 2.73, 2.72, 2.72, 2.72, 2.71,\n",
       "       2.71, 2.71, 2.71, 2.7 , 2.7 , 2.7 , 2.69, 2.69, 2.69, 2.69, 2.68,\n",
       "       2.68, 2.68, 2.68, 2.67, 2.67, 2.67, 2.67, 2.66, 2.66, 2.66, 2.66,\n",
       "       2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.64, 2.64, 2.64, 2.64, 2.64,\n",
       "       2.64, 2.64, 2.64, 2.64, 2.64, 2.64, 2.64, 2.64, 2.64, 2.64, 2.64,\n",
       "       2.64, 2.64, 2.64, 2.65, 2.65, 2.65, 2.66, 2.66, 2.67, 2.67, 2.68,\n",
       "       2.69, 2.71])"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred = regressor.predict(Xtest)\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "d7d6bf61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.0188728676777576"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "90a71c76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2952142757053244"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "ce74ca4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4633591853113566"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "283fc715",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2347255521780523"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_percentage_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "56493759",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse: 0.5433362455287926\n"
     ]
    }
   ],
   "source": [
    "print('rmse: {}'.format(math.sqrt(mean_squared_error(Ytest, pred))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "c84c2cbd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x20618d4b310>"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(Ytest, color='blue', label='True Values')\n",
    "plt.plot(pred, color='red', label='Predicted Values')\n",
    "plt.legend(loc='best')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffff4647",
   "metadata": {},
   "source": [
    "### SVR with linear Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "b8e25b51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVR(kernel='linear')"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVR\n",
    "regressor = SVR(kernel = 'linear')\n",
    "regressor.fit(Xtrain, Ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "2db094c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.71, 2.69, 2.68, 2.68, 2.68, 2.68, 2.67, 2.65, 2.65, 2.64, 2.64,\n",
       "       2.64, 2.63, 2.61, 2.6 , 2.6 , 2.59, 2.59, 2.59, 2.57, 2.56, 2.55,\n",
       "       2.54, 2.53, 2.53, 2.52, 2.51, 2.49, 2.49, 2.48, 2.48, 2.47, 2.45,\n",
       "       2.45, 2.44, 2.43, 2.41, 2.4 , 2.38, 2.38, 2.38, 2.36, 2.34, 2.32,\n",
       "       2.31, 2.31, 2.31, 2.29, 2.26, 2.24, 2.25, 2.23, 2.22, 2.21, 2.19,\n",
       "       2.18, 2.19, 2.18, 2.16, 2.12, 2.11, 2.11, 2.11, 2.08, 2.06, 2.03,\n",
       "       2.01, 1.98, 1.96, 1.93, 1.91, 1.89, 1.88, 1.84, 1.79, 1.75, 1.7 ,\n",
       "       1.67, 1.6 ])"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred = regressor.predict(Xtest)\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "68db97f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.880097861911593"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "16adab3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.011725178370468305"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "9c10c20d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.10308801332146275"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "3863cac4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.049766016657812884"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_percentage_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "0bf85b22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse: 0.10828286277370167\n"
     ]
    }
   ],
   "source": [
    "print('rmse: {}'.format(math.sqrt(mean_squared_error(Ytest, pred))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "89e5d0d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x20611f7aaf0>"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(Ytest, color='blue', label='True Values')\n",
    "plt.plot(pred, color='red', label='Predicted Values')\n",
    "plt.legend(loc='best')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "309e17b9",
   "metadata": {},
   "source": [
    "### SVR with Sigmoid Kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "3149b0be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVR(kernel='sigmoid')"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVR\n",
    "regressor = SVR(kernel = 'sigmoid')\n",
    "regressor.fit(Xtrain, Ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "a0f7a0e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([12.88, 12.94, 12.99, 13.03, 13.08, 13.12, 13.18, 13.23, 13.29,\n",
       "       13.34, 13.4 , 13.46, 13.52, 13.58, 13.65, 13.7 , 13.74, 13.79,\n",
       "       13.83, 13.89, 13.95, 14.  , 14.06, 14.12, 14.18, 14.23, 14.29,\n",
       "       14.35, 14.41, 14.47, 14.52, 14.58, 14.64, 14.71, 14.76, 14.82,\n",
       "       14.89, 14.95, 15.01, 15.07, 15.13, 15.19, 15.26, 15.33, 15.4 ,\n",
       "       15.46, 15.52, 15.59, 15.67, 15.74, 15.8 , 15.86, 15.93, 15.99,\n",
       "       16.05, 16.11, 16.16, 16.22, 16.26, 16.33, 16.38, 16.44, 16.49,\n",
       "       16.54, 16.59, 16.65, 16.7 , 16.76, 16.82, 16.88, 16.94, 17.  ,\n",
       "       17.05, 17.1 , 17.15, 17.19, 17.23, 17.26, 17.29])"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred = regressor.predict(Xtest)\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "6b0a9563",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1723.2682466065432"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "1423b163",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "168.6154481673176"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "72786be2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12.880303370467349"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "ccf8644b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.0456922463067375"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_percentage_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "105862cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse: 12.985201121558248\n"
     ]
    }
   ],
   "source": [
    "print('rmse: {}'.format(math.sqrt(mean_squared_error(Ytest, pred))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "574381d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x20618e3ca60>"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(Ytest, color='blue', label='True Values')\n",
    "plt.plot(pred, color='red', label='Predicted Values')\n",
    "plt.legend(loc='best')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98d6847f",
   "metadata": {},
   "source": [
    "### Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "a22fc6e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(random_state=0)"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "regressor = DecisionTreeRegressor(random_state = 0)\n",
    "regressor.fit(Xtrain, Ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "01e6104e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63,\n",
       "       2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63,\n",
       "       2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63,\n",
       "       2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63,\n",
       "       2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63,\n",
       "       2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63,\n",
       "       2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63, 2.63,\n",
       "       2.63, 2.63])"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred = regressor.predict(Xtest)\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "3e6f851d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.7198032756088408"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "21c08f2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.26596838928413563"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "e14d1a43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4100961113924052"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "e1893441",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2120881855078149"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_percentage_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "c80d4935",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse: 0.5157212321440098\n"
     ]
    }
   ],
   "source": [
    "print('rmse: {}'.format(math.sqrt(mean_squared_error(Ytest, pred))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "866f6960",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x20621a20430>"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(Ytest, color='blue', label='True Values')\n",
    "plt.plot(pred, color='red', label='Predicted Values')\n",
    "plt.legend(loc='best')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "500b7c2c",
   "metadata": {},
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "eeb9787a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(n_estimators=20, random_state=0)"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "regressor = RandomForestRegressor(n_estimators = 20, random_state = 0) \n",
    "regressor.fit(Xtrain, Ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "52f50c17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65,\n",
       "       2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65,\n",
       "       2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65,\n",
       "       2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65,\n",
       "       2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65,\n",
       "       2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65,\n",
       "       2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65,\n",
       "       2.65, 2.65])"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred = regressor.predict(Xtest)\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "5b8d036f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.86512071008744"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "669a4ea1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.28017891852710963"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "40ee6a19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4270706613924047"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "fc4c5a30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.21990372557526755"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_percentage_error(Ytest, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "fce2aec0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rmse: 0.529319297331119\n"
     ]
    }
   ],
   "source": [
    "print('rmse: {}'.format(math.sqrt(mean_squared_error(Ytest, pred))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "48cac5b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x20621aa1d90>"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(Ytest, color='blue', label='True Values')\n",
    "plt.plot(pred, color='red', label='Predicted Values')\n",
    "plt.legend(loc='best')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "486e0f6d",
   "metadata": {},
   "source": [
    "### Artificial Neural Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "b9894556",
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert2matrix(data_arr, look_back):\n",
    "    X, Y =[], []\n",
    "    for i in range(len(data_arr)-look_back):\n",
    "        d=i+look_back  \n",
    "        X.append(data_arr[i:d,0])\n",
    "        Y.append(data_arr[d,0])\n",
    "    return np.array(X), np.array(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "78e5fb83",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df1 = df['chlorophyll']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "56e6ef19",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "0e4168db",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "78308751",
   "metadata": {},
   "outputs": [],
   "source": [
    "split = int(len(df) * 0.8)\n",
    "#Split data set into testing dataset and train dataset\n",
    "train_size = split\n",
    "train, test =df.values[0:train_size],df.values[train_size:len(df.values)]\n",
    "train = train.reshape(-1, 1)\n",
    "test = test.reshape(-1, 1)\n",
    "# setup look_back window \n",
    "look_back = 7\n",
    "#convert dataset into right shape in order to input into the DNN\n",
    "trainX, trainY = convert2matrix(train, look_back)\n",
    "testX, testY = convert2matrix(test, look_back)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "170c8799",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[40.513763 , 34.596703 , 29.360538 , ..., 24.834644 , 24.632782 ,\n",
       "        24.573523 ],\n",
       "       [34.596703 , 29.360538 , 25.35229  , ..., 24.632782 , 24.573523 ,\n",
       "        23.754904 ],\n",
       "       [29.360538 , 25.35229  , 24.834644 , ..., 24.573523 , 23.754904 ,\n",
       "        20.601889 ],\n",
       "       ...,\n",
       "       [ 2.703685 ,  2.70337  ,  2.699355 , ...,  2.683516 ,  2.6830487,\n",
       "         2.681809 ],\n",
       "       [ 2.70337  ,  2.699355 ,  2.686795 , ...,  2.6830487,  2.681809 ,\n",
       "         2.680179 ],\n",
       "       [ 2.699355 ,  2.686795 ,  2.683516 , ...,  2.681809 ,  2.680179 ,\n",
       "         2.664958 ]])"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "390521ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2.626562 , 2.618568 , 2.617111 , 2.616436 , 2.610314 , 2.5973916,\n",
       "        2.5895624],\n",
       "       [2.618568 , 2.617111 , 2.616436 , 2.610314 , 2.5973916, 2.5895624,\n",
       "        2.5830703],\n",
       "       [2.617111 , 2.616436 , 2.610314 , 2.5973916, 2.5895624, 2.5830703,\n",
       "        2.57425  ],\n",
       "       [2.616436 , 2.610314 , 2.5973916, 2.5895624, 2.5830703, 2.57425  ,\n",
       "        2.5654306],\n",
       "       [2.610314 , 2.5973916, 2.5895624, 2.5830703, 2.57425  , 2.5654306,\n",
       "        2.564958 ],\n",
       "       [2.5973916, 2.5895624, 2.5830703, 2.57425  , 2.5654306, 2.564958 ,\n",
       "        2.5552056],\n",
       "       [2.5895624, 2.5830703, 2.57425  , 2.5654306, 2.564958 , 2.5552056,\n",
       "        2.542957 ],\n",
       "       [2.5830703, 2.57425  , 2.5654306, 2.564958 , 2.5552056, 2.542957 ,\n",
       "        2.532622 ],\n",
       "       [2.57425  , 2.5654306, 2.564958 , 2.5552056, 2.542957 , 2.532622 ,\n",
       "        2.529135 ],\n",
       "       [2.5654306, 2.564958 , 2.5552056, 2.542957 , 2.532622 , 2.529135 ,\n",
       "        2.523596 ],\n",
       "       [2.564958 , 2.5552056, 2.542957 , 2.532622 , 2.529135 , 2.523596 ,\n",
       "        2.5232935],\n",
       "       [2.5552056, 2.542957 , 2.532622 , 2.529135 , 2.523596 , 2.5232935,\n",
       "        2.518894 ],\n",
       "       [2.542957 , 2.532622 , 2.529135 , 2.523596 , 2.5232935, 2.518894 ,\n",
       "        2.495198 ],\n",
       "       [2.532622 , 2.529135 , 2.523596 , 2.5232935, 2.518894 , 2.495198 ,\n",
       "        2.4902236],\n",
       "       [2.529135 , 2.523596 , 2.5232935, 2.518894 , 2.495198 , 2.4902236,\n",
       "        2.478511 ],\n",
       "       [2.523596 , 2.5232935, 2.518894 , 2.495198 , 2.4902236, 2.478511 ,\n",
       "        2.458893 ],\n",
       "       [2.5232935, 2.518894 , 2.495198 , 2.4902236, 2.478511 , 2.458893 ,\n",
       "        2.457036 ],\n",
       "       [2.518894 , 2.495198 , 2.4902236, 2.478511 , 2.458893 , 2.457036 ,\n",
       "        2.449777 ],\n",
       "       [2.495198 , 2.4902236, 2.478511 , 2.458893 , 2.457036 , 2.449777 ,\n",
       "        2.443396 ],\n",
       "       [2.4902236, 2.478511 , 2.458893 , 2.457036 , 2.449777 , 2.443396 ,\n",
       "        2.430886 ],\n",
       "       [2.478511 , 2.458893 , 2.457036 , 2.449777 , 2.443396 , 2.430886 ,\n",
       "        2.416031 ],\n",
       "       [2.458893 , 2.457036 , 2.449777 , 2.443396 , 2.430886 , 2.416031 ,\n",
       "        2.414041 ],\n",
       "       [2.457036 , 2.449777 , 2.443396 , 2.430886 , 2.416031 , 2.414041 ,\n",
       "        2.403997 ],\n",
       "       [2.449777 , 2.443396 , 2.430886 , 2.416031 , 2.414041 , 2.403997 ,\n",
       "        2.402389 ],\n",
       "       [2.443396 , 2.430886 , 2.416031 , 2.414041 , 2.403997 , 2.402389 ,\n",
       "        2.390351 ],\n",
       "       [2.430886 , 2.416031 , 2.414041 , 2.403997 , 2.402389 , 2.390351 ,\n",
       "        2.372338 ],\n",
       "       [2.416031 , 2.414041 , 2.403997 , 2.402389 , 2.390351 , 2.372338 ,\n",
       "        2.3709226],\n",
       "       [2.414041 , 2.403997 , 2.402389 , 2.390351 , 2.372338 , 2.3709226,\n",
       "        2.366391 ],\n",
       "       [2.403997 , 2.402389 , 2.390351 , 2.372338 , 2.3709226, 2.366391 ,\n",
       "        2.354201 ],\n",
       "       [2.402389 , 2.390351 , 2.372338 , 2.3709226, 2.366391 , 2.354201 ,\n",
       "        2.314509 ],\n",
       "       [2.390351 , 2.372338 , 2.3709226, 2.366391 , 2.354201 , 2.314509 ,\n",
       "        2.3100133],\n",
       "       [2.372338 , 2.3709226, 2.366391 , 2.354201 , 2.314509 , 2.3100133,\n",
       "        2.301764 ],\n",
       "       [2.3709226, 2.366391 , 2.354201 , 2.314509 , 2.3100133, 2.301764 ,\n",
       "        2.3015459],\n",
       "       [2.366391 , 2.354201 , 2.314509 , 2.3100133, 2.301764 , 2.3015459,\n",
       "        2.2983167],\n",
       "       [2.354201 , 2.314509 , 2.3100133, 2.301764 , 2.3015459, 2.2983167,\n",
       "        2.268509 ],\n",
       "       [2.314509 , 2.3100133, 2.301764 , 2.3015459, 2.2983167, 2.268509 ,\n",
       "        2.240279 ],\n",
       "       [2.3100133, 2.301764 , 2.3015459, 2.2983167, 2.268509 , 2.240279 ,\n",
       "        2.239543 ],\n",
       "       [2.301764 , 2.3015459, 2.2983167, 2.268509 , 2.240279 , 2.239543 ,\n",
       "        2.232499 ],\n",
       "       [2.3015459, 2.2983167, 2.268509 , 2.240279 , 2.239543 , 2.232499 ,\n",
       "        2.22993  ],\n",
       "       [2.2983167, 2.268509 , 2.240279 , 2.239543 , 2.232499 , 2.22993  ,\n",
       "        2.227068 ],\n",
       "       [2.268509 , 2.240279 , 2.239543 , 2.232499 , 2.22993  , 2.227068 ,\n",
       "        2.1793647],\n",
       "       [2.240279 , 2.239543 , 2.232499 , 2.22993  , 2.227068 , 2.1793647,\n",
       "        2.1668825],\n",
       "       [2.239543 , 2.232499 , 2.22993  , 2.227068 , 2.1793647, 2.1668825,\n",
       "        2.163881 ],\n",
       "       [2.232499 , 2.22993  , 2.227068 , 2.1793647, 2.1668825, 2.163881 ,\n",
       "        2.161777 ],\n",
       "       [2.22993  , 2.227068 , 2.1793647, 2.1668825, 2.163881 , 2.161777 ,\n",
       "        2.131295 ],\n",
       "       [2.227068 , 2.1793647, 2.1668825, 2.163881 , 2.161777 , 2.131295 ,\n",
       "        2.114696 ],\n",
       "       [2.1793647, 2.1668825, 2.163881 , 2.161777 , 2.131295 , 2.114696 ,\n",
       "        2.114525 ],\n",
       "       [2.1668825, 2.163881 , 2.161777 , 2.131295 , 2.114696 , 2.114525 ,\n",
       "        2.1101096],\n",
       "       [2.163881 , 2.161777 , 2.131295 , 2.114696 , 2.114525 , 2.1101096,\n",
       "        2.099039 ],\n",
       "       [2.161777 , 2.131295 , 2.114696 , 2.114525 , 2.1101096, 2.099039 ,\n",
       "        2.097292 ],\n",
       "       [2.131295 , 2.114696 , 2.114525 , 2.1101096, 2.099039 , 2.097292 ,\n",
       "        2.0747013],\n",
       "       [2.114696 , 2.114525 , 2.1101096, 2.099039 , 2.097292 , 2.0747013,\n",
       "        2.0699751],\n",
       "       [2.114525 , 2.1101096, 2.099039 , 2.097292 , 2.0747013, 2.0699751,\n",
       "        2.022051 ],\n",
       "       [2.1101096, 2.099039 , 2.097292 , 2.0747013, 2.0699751, 2.022051 ,\n",
       "        2.0203831],\n",
       "       [2.099039 , 2.097292 , 2.0747013, 2.0699751, 2.022051 , 2.0203831,\n",
       "        2.012919 ],\n",
       "       [2.097292 , 2.0747013, 2.0699751, 2.022051 , 2.0203831, 2.012919 ,\n",
       "        2.008476 ],\n",
       "       [2.0747013, 2.0699751, 2.022051 , 2.0203831, 2.012919 , 2.008476 ,\n",
       "        1.976368 ],\n",
       "       [2.0699751, 2.022051 , 2.0203831, 2.012919 , 2.008476 , 1.976368 ,\n",
       "        1.9565933],\n",
       "       [2.022051 , 2.0203831, 2.012919 , 2.008476 , 1.976368 , 1.9565933,\n",
       "        1.923044 ],\n",
       "       [2.0203831, 2.012919 , 2.008476 , 1.976368 , 1.9565933, 1.923044 ,\n",
       "        1.905118 ],\n",
       "       [2.012919 , 2.008476 , 1.976368 , 1.9565933, 1.923044 , 1.905118 ,\n",
       "        1.868282 ],\n",
       "       [2.008476 , 1.976368 , 1.9565933, 1.923044 , 1.905118 , 1.868282 ,\n",
       "        1.849692 ],\n",
       "       [1.976368 , 1.9565933, 1.923044 , 1.905118 , 1.868282 , 1.849692 ,\n",
       "        1.8061495],\n",
       "       [1.9565933, 1.923044 , 1.905118 , 1.868282 , 1.849692 , 1.8061495,\n",
       "        1.789134 ],\n",
       "       [1.923044 , 1.905118 , 1.868282 , 1.849692 , 1.8061495, 1.789134 ,\n",
       "        1.7821608],\n",
       "       [1.905118 , 1.868282 , 1.849692 , 1.8061495, 1.789134 , 1.7821608,\n",
       "        1.7704444],\n",
       "       [1.868282 , 1.849692 , 1.8061495, 1.789134 , 1.7821608, 1.7704444,\n",
       "        1.707241 ],\n",
       "       [1.849692 , 1.8061495, 1.789134 , 1.7821608, 1.7704444, 1.707241 ,\n",
       "        1.6545143],\n",
       "       [1.8061495, 1.789134 , 1.7821608, 1.7704444, 1.707241 , 1.6545143,\n",
       "        1.6278129],\n",
       "       [1.789134 , 1.7821608, 1.7704444, 1.707241 , 1.6545143, 1.6278129,\n",
       "        1.562081 ],\n",
       "       [1.7821608, 1.7704444, 1.707241 , 1.6545143, 1.6278129, 1.562081 ,\n",
       "        1.549586 ],\n",
       "       [1.7704444, 1.707241 , 1.6545143, 1.6278129, 1.562081 , 1.549586 ,\n",
       "        1.4395466]])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "2b91e6ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import tensorflow.keras.backend as K\n",
    "def root_mean_squared_log_error(y_true, y_pred):\n",
    "    msle = tf.keras.losses.MeanSquaredLogarithmicError()\n",
    "    return K.sqrt(msle(y_true, y_pred))\n",
    "from keras.models import Sequential\n",
    "from keras.callbacks import EarlyStopping\n",
    "from keras.layers import Dense\n",
    "def model_dnn(look_back):\n",
    "    model=Sequential()\n",
    "    model.add(Dense(units=128, input_dim=look_back, activation='relu'))\n",
    "    model.add(Dense(64, activation='relu'))\n",
    "    model.add(Dense(32))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(loss='mean_squared_error',  optimizer='adam',metrics = [tf.keras.losses.MeanAbsolutePercentageError(), \n",
    "                                                                          tf.keras.losses.MeanSquaredLogarithmicError(),\n",
    "                                                                          root_mean_squared_log_error])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "2201a3d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "11/11 [==============================] - 3s 47ms/step - loss: 15.8048 - mean_absolute_percentage_error: 35.6982 - mean_squared_logarithmic_error: 0.3560 - root_mean_squared_log_error: 0.4296 - val_loss: 0.0625 - val_mean_absolute_percentage_error: 13.3864 - val_mean_squared_logarithmic_error: 0.0077 - val_root_mean_squared_log_error: 0.0846\n",
      "Epoch 2/100\n",
      "11/11 [==============================] - 0s 4ms/step - loss: 1.3594 - mean_absolute_percentage_error: 4.8705 - mean_squared_logarithmic_error: 0.0044 - root_mean_squared_log_error: 0.0412 - val_loss: 0.0074 - val_mean_absolute_percentage_error: 4.8764 - val_mean_squared_logarithmic_error: 0.0016 - val_root_mean_squared_log_error: 0.0321\n",
      "Epoch 3/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.5729 - mean_absolute_percentage_error: 10.0780 - mean_squared_logarithmic_error: 0.0077 - root_mean_squared_log_error: 0.0838 - val_loss: 0.0623 - val_mean_absolute_percentage_error: 9.3090 - val_mean_squared_logarithmic_error: 0.0052 - val_root_mean_squared_log_error: 0.0676\n",
      "Epoch 4/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.3248 - mean_absolute_percentage_error: 10.4064 - mean_squared_logarithmic_error: 0.0088 - root_mean_squared_log_error: 0.0890 - val_loss: 0.0059 - val_mean_absolute_percentage_error: 3.7254 - val_mean_squared_logarithmic_error: 8.6061e-04 - val_root_mean_squared_log_error: 0.0267\n",
      "Epoch 5/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.1868 - mean_absolute_percentage_error: 5.1450 - mean_squared_logarithmic_error: 0.0022 - root_mean_squared_log_error: 0.0440 - val_loss: 0.0057 - val_mean_absolute_percentage_error: 4.1683 - val_mean_squared_logarithmic_error: 0.0014 - val_root_mean_squared_log_error: 0.0280\n",
      "Epoch 6/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.2360 - mean_absolute_percentage_error: 6.2789 - mean_squared_logarithmic_error: 0.0029 - root_mean_squared_log_error: 0.0529 - val_loss: 0.0064 - val_mean_absolute_percentage_error: 3.9391 - val_mean_squared_logarithmic_error: 9.6707e-04 - val_root_mean_squared_log_error: 0.0280\n",
      "Epoch 7/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.1511 - mean_absolute_percentage_error: 5.8027 - mean_squared_logarithmic_error: 0.0028 - root_mean_squared_log_error: 0.0491 - val_loss: 0.0073 - val_mean_absolute_percentage_error: 4.7107 - val_mean_squared_logarithmic_error: 0.0017 - val_root_mean_squared_log_error: 0.0311\n",
      "Epoch 8/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1468 - mean_absolute_percentage_error: 4.5520 - mean_squared_logarithmic_error: 0.0017 - root_mean_squared_log_error: 0.0390 - val_loss: 0.0082 - val_mean_absolute_percentage_error: 4.9990 - val_mean_squared_logarithmic_error: 0.0019 - val_root_mean_squared_log_error: 0.0328\n",
      "Epoch 9/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.1248 - mean_absolute_percentage_error: 4.3619 - mean_squared_logarithmic_error: 0.0017 - root_mean_squared_log_error: 0.0374 - val_loss: 0.0111 - val_mean_absolute_percentage_error: 5.9252 - val_mean_squared_logarithmic_error: 0.0023 - val_root_mean_squared_log_error: 0.0386\n",
      "Epoch 10/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1082 - mean_absolute_percentage_error: 3.6852 - mean_squared_logarithmic_error: 0.0013 - root_mean_squared_log_error: 0.0321 - val_loss: 0.0163 - val_mean_absolute_percentage_error: 7.2900 - val_mean_squared_logarithmic_error: 0.0031 - val_root_mean_squared_log_error: 0.0468\n",
      "Epoch 11/100\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.6695 - mean_absolute_percentage_error: 3.9516 - mean_squared_logarithmic_error: 0.0020 - root_mean_squared_log_error: 0.044 - 0s 7ms/step - loss: 0.0995 - mean_absolute_percentage_error: 3.3631 - mean_squared_logarithmic_error: 0.0011 - root_mean_squared_log_error: 0.0293 - val_loss: 0.0189 - val_mean_absolute_percentage_error: 7.8683 - val_mean_squared_logarithmic_error: 0.0034 - val_root_mean_squared_log_error: 0.0503\n",
      "Epoch 12/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.0857 - mean_absolute_percentage_error: 3.1447 - mean_squared_logarithmic_error: 9.9682e-04 - root_mean_squared_log_error: 0.0273 - val_loss: 0.0258 - val_mean_absolute_percentage_error: 9.1614 - val_mean_squared_logarithmic_error: 0.0043 - val_root_mean_squared_log_error: 0.0583\n",
      "Epoch 13/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.0799 - mean_absolute_percentage_error: 2.9025 - mean_squared_logarithmic_error: 8.4933e-04 - root_mean_squared_log_error: 0.0253 - val_loss: 0.0281 - val_mean_absolute_percentage_error: 9.5430 - val_mean_squared_logarithmic_error: 0.0046 - val_root_mean_squared_log_error: 0.0606\n",
      "Epoch 14/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.0698 - mean_absolute_percentage_error: 2.8549 - mean_squared_logarithmic_error: 8.0270e-04 - root_mean_squared_log_error: 0.0246 - val_loss: 0.0364 - val_mean_absolute_percentage_error: 10.7752 - val_mean_squared_logarithmic_error: 0.0056 - val_root_mean_squared_log_error: 0.0682\n",
      "Epoch 15/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.0666 - mean_absolute_percentage_error: 2.6543 - mean_squared_logarithmic_error: 6.9599e-04 - root_mean_squared_log_error: 0.0230 - val_loss: 0.0363 - val_mean_absolute_percentage_error: 10.7796 - val_mean_squared_logarithmic_error: 0.0057 - val_root_mean_squared_log_error: 0.0682\n"
     ]
    }
   ],
   "source": [
    "dnn_model=model_dnn(look_back)\n",
    "\n",
    "dnn_history=dnn_model.fit(trainX,trainY, epochs=100, batch_size=30, verbose=1, validation_data=(testX,testY),\n",
    "                          callbacks=[EarlyStopping(monitor='val_loss', patience=10)],shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "5ee15987",
   "metadata": {},
   "outputs": [],
   "source": [
    "def model_loss(history):\n",
    "    plt.figure(figsize=(8,4))\n",
    "    plt.plot(history.history['loss'], label='Train Loss')\n",
    "    plt.plot(history.history['val_loss'], label='Test Loss')\n",
    "    plt.title('model loss')\n",
    "    plt.ylabel('loss')\n",
    "    plt.xlabel('epochs')\n",
    "    plt.legend(loc='upper right')\n",
    "    plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "5902904d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Mean Absolute Percentage Error(MAPE): 1.53; Train Mean Squared Logarithmic Error(MSLE) : 0.00; Train Root Mean Squared Logarithmic Error(RMSLE) : 0.02 \n",
      "Test Mean Absolute Percentage Error(MAPE): 3.44; Test Mean Squared Logarithmic Error(MSLE) : 0.01; Test Root Mean Squared Logarithmic Error(RMSLE) : 0.07 \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dnn_train_score = dnn_model.evaluate(trainX, trainY, verbose=0)\n",
    "print('Train Mean Absolute Percentage Error(MAPE): %.2f; Train Mean Squared Logarithmic Error(MSLE) : %.2f; Train Root Mean Squared Logarithmic Error(RMSLE) : %.2f ' \n",
    "% (np.sqrt(dnn_train_score[1]), dnn_train_score[2], dnn_train_score[3]))\n",
    "dnn_test_score = dnn_model.evaluate(testX, testY, verbose=0)\n",
    "print('Test Mean Absolute Percentage Error(MAPE): %.2f; Test Mean Squared Logarithmic Error(MSLE) : %.2f; Test Root Mean Squared Logarithmic Error(RMSLE) : %.2f '  \n",
    "% (np.sqrt(dnn_test_score[1]), dnn_test_score[2], dnn_test_score[3]))\n",
    "model_loss(dnn_history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "281e37fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "def prediction_plot(testY, test_predict):\n",
    "    plt.figure(figsize=(8,4))\n",
    "    plt.plot(testY, label=\"actual\")\n",
    "    plt.plot(test_predict, label=\"prediction\")\n",
    "    plt.tight_layout()\n",
    "    sns.despine(top=True)\n",
    "    plt.subplots_adjust(left=0.07)\n",
    "    plt.ylabel('Chlorophyl', size=15)\n",
    "    plt.legend(fontsize=15)\n",
    "#     plt.ticklabel_format(style='plain', useOffset=False, axis='y')\n",
    "#     plt.yscale(\"log\")\n",
    "    plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "564fad7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "dnn_test_predict = dnn_model.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "1ee40be8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "prediction_plot(testY, dnn_test_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "21e9c43b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.601452669412501"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(testY, dnn_test_predict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e33b095d",
   "metadata": {},
   "source": [
    "###  LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "b745233f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_arr= df.values \n",
    "#df1.values = df_arr.astype('float32')\n",
    "df_arr = np.reshape(df_arr, (-1, 1)) #LTSM requires more input features compared to RNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "2fea5f13",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_size = len(df_arr)-train_size\n",
    "train, test = df_arr[0:train_size,:], df_arr[train_size:len(df_arr),:]\n",
    "trainX, trainY = convert2matrix(train, look_back)\n",
    "testX, testY = convert2matrix(test, look_back)\n",
    "# reshape input to be [samples, time steps, features]\n",
    "trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\n",
    "testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "da564163",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "11/11 [==============================] - 4s 62ms/step - loss: 33.9846 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 2.8926 - root_mean_squared_log_error: 1.6610 - val_loss: 4.8640 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 1.2642 - val_root_mean_squared_log_error: 1.1192\n",
      "Epoch 2/100\n",
      "11/11 [==============================] - 0s 8ms/step - loss: 33.9846 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 2.8926 - root_mean_squared_log_error: 1.6610 - val_loss: 4.8640 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 1.2642 - val_root_mean_squared_log_error: 1.1192\n",
      "Epoch 3/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 33.9846 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 2.8926 - root_mean_squared_log_error: 1.6610 - val_loss: 4.8640 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 1.2642 - val_root_mean_squared_log_error: 1.1192\n",
      "Epoch 4/100\n",
      "11/11 [==============================] - 0s 7ms/step - loss: 33.9846 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 2.8926 - root_mean_squared_log_error: 1.6610 - val_loss: 4.8640 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 1.2642 - val_root_mean_squared_log_error: 1.1192\n",
      "Epoch 5/100\n",
      "11/11 [==============================] - ETA: 0s - loss: 187.7124 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 6.8239 - root_mean_squared_log_error: 2.612 - 0s 8ms/step - loss: 33.9846 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 2.8926 - root_mean_squared_log_error: 1.6610 - val_loss: 4.8640 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 1.2642 - val_root_mean_squared_log_error: 1.1192\n",
      "Epoch 6/100\n",
      "11/11 [==============================] - 0s 8ms/step - loss: 33.9846 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 2.8926 - root_mean_squared_log_error: 1.6610 - val_loss: 4.8640 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 1.2642 - val_root_mean_squared_log_error: 1.1192\n",
      "Epoch 7/100\n",
      "11/11 [==============================] - 0s 9ms/step - loss: 33.9846 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 2.8926 - root_mean_squared_log_error: 1.6610 - val_loss: 4.8640 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 1.2642 - val_root_mean_squared_log_error: 1.1192\n",
      "Epoch 8/100\n",
      "11/11 [==============================] - 0s 8ms/step - loss: 33.9846 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 2.8926 - root_mean_squared_log_error: 1.6610 - val_loss: 4.8640 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 1.2642 - val_root_mean_squared_log_error: 1.1192\n",
      "Epoch 9/100\n",
      "11/11 [==============================] - 0s 7ms/step - loss: 33.9846 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 2.8926 - root_mean_squared_log_error: 1.6610 - val_loss: 4.8640 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 1.2642 - val_root_mean_squared_log_error: 1.1192\n",
      "Epoch 10/100\n",
      "11/11 [==============================] - 0s 9ms/step - loss: 33.9846 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 2.8926 - root_mean_squared_log_error: 1.6610 - val_loss: 4.8640 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 1.2642 - val_root_mean_squared_log_error: 1.1192\n",
      "Epoch 11/100\n",
      "11/11 [==============================] - 0s 9ms/step - loss: 33.9846 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 2.8926 - root_mean_squared_log_error: 1.6610 - val_loss: 4.8640 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 1.2642 - val_root_mean_squared_log_error: 1.1192\n"
     ]
    }
   ],
   "source": [
    "from keras.layers import Dense, LSTM, Dropout\n",
    "def model_lstm(look_back):\n",
    "    model=Sequential()\n",
    "    model.add(LSTM(100, input_shape=(1, look_back), activation='relu'))\n",
    "    model.add(Dropout(0.2))\n",
    "    model.add(Dense(32, activation='relu'))\n",
    "    model.add(Dense(16, activation='relu'))\n",
    "    model.add(Dense(1, activation='relu'))\n",
    "    model.compile(loss='mean_squared_error',  optimizer='adam',metrics = [tf.keras.losses.MeanAbsolutePercentageError(), \n",
    "                                                                          tf.keras.losses.MeanSquaredLogarithmicError(),\n",
    "                                                                          root_mean_squared_log_error])\n",
    "    return model\n",
    "\n",
    "lstm_model=model_lstm(look_back)\n",
    "lstm_history=lstm_model.fit(trainX,trainY, epochs=100, batch_size=30, verbose=1, validation_data=(testX,testY),\n",
    "                            callbacks=[EarlyStopping(monitor='val_loss', patience=10)],shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "95aea218",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Mean Absolute Percentage Error(MAPE): 10.00; Train Mean Squared Logarithmic Error(MSLE) : 2.93 ; Train Root Mean Squared Logarithmic Error(RMSLE) : 1.67 \n",
      "Test Mean Absolute Percentage Error(MAPE): 10.00; Test Mean Squared Logarithmic Error(MSLE) : 1.23 ; Test Root Mean Squared Logarithmic Error(RMSLE) : 1.10 \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lstm_train_score = lstm_model.evaluate(trainX, trainY, verbose=0)\n",
    "print('Train Mean Absolute Percentage Error(MAPE): %.2f; Train Mean Squared Logarithmic Error(MSLE) : %.2f ; Train Root Mean Squared Logarithmic Error(RMSLE) : %.2f ' \n",
    "% (np.sqrt(lstm_train_score[1]), lstm_train_score[2], lstm_train_score[3]))\n",
    "lstm_test_score = lstm_model.evaluate(testX, testY, verbose=0)\n",
    "print('Test Mean Absolute Percentage Error(MAPE): %.2f; Test Mean Squared Logarithmic Error(MSLE) : %.2f ; Test Root Mean Squared Logarithmic Error(RMSLE) : %.2f '  \n",
    "% (np.sqrt(lstm_test_score[1]), lstm_test_score[2], lstm_test_score[3]))\n",
    "model_loss(lstm_history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "7dca5cba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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xdH4aBERETmwWGsb9tTRum87FyIiIiLSKe2pT1E9cCswyDlXsqsHMCi8T01HFysiIiLSUfYUii4H+gGv72af1wmdUbqsvYoSERERibQ9haLTgHvdbjoehbf9ldBo1CIiIiIHpD2Foj6ERq/ek8VAwX5XIyIiIhIlewpFNUDyXhwnEfUpEhERkQPYnkLRHOD0vTjOGeF9RURERA5IewpFdwP/Y2Y/am0HMzuf0CCLd7ZnYSIiIiKRtNtxipxzz5rZHcDfzOxi4FVgBeCAfOAkoAi4zTn3XEcXKyIiItJR9jR4I865y8zsHeASQrfox4Y31QHvA2c4517sqAJFREREImGPoQjAOfdP4J9mFgOkh1dvdM41dlhlIiIiIhG0V6Fom3AIKu2gWkRERESiZk8drUVERES6BYUiERERERSKRERERACFIhERERFAoUhEREQEUCgSERERARSKRERERACFIhERERFAoUhEREQEUCgSERERARSKRERERACFIhERERFAoUhEREQEUCgSERERARSKRERERACFIhERERFAoUhEREQEUCgSERERARSKRERERACFIhERERFAoUhEREQEUCgSERERARSKRERERIAohCIzG2dmX5jZEjObsovtE81svZnNCz9+EukaRUREpPuJieSHmZkXuAs4AVgFfGJmLzjnFu2065POuYsjWZuIiIh0b5E+UzQSWOKc+9o5Vw88AZwR4RpEREREviHSoSgHWNlieVV43c7ONLPPzOwZM8uLTGkiIiLSnXXGjtb/BAqcc4cAbwAP72onM5tsZsVmVrx+/fqIFigiIiJdT6RD0Wqg5Zmf3PC6Zs65jc65uvDi/cDwXR3IOTfdOVfknCvKzMzskGJFRESk+4h0KPoEGGhmfc3MD0wAXmi5g5n1arF4OrA4gvWJiIhINxXRu8+cc41mdjHwGuAFHnTOLTSzaUCxc+4F4BdmdjrQCJQDEyNZo4iIiHRP5pyLdg37raioyBUXF0e7DBEREen8rLUNnbGjtYiIiEjEKRSJiIiIoFAkIiIiAigUiYiIiAAKRSIiIiKAQpGIiIgIoFAkIiIiAigUiYiIiAAKRSIiIiKAQpGIiIgIoFAkIiIiAigUiYiIiAAKRSIiIiKAQpGIiIgIoFAkIiIiAigUiYiIiAAKRSIiIiKAQpGIiIgIoFAkIiIiAigUiYiIiAAK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\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lstm_test_predict = lstm_model.predict(testX)\n",
    "prediction_plot(testY, lstm_test_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "2e6270d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-52.3393842271948"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(testY, lstm_test_predict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f1dcede",
   "metadata": {},
   "source": [
    "### CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "7fad6376",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_size = len(df_arr)-train_size\n",
    "train, test = df_arr[0:train_size,:], df_arr[train_size:len(df_arr),:]\n",
    "trainX, trainY = convert2matrix(train, look_back)\n",
    "testX, testY = convert2matrix(test, look_back)\n",
    "# reshape input to be [samples, time steps, features]\n",
    "trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\n",
    "testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "135016b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "11/11 [==============================] - 2s 51ms/step - loss: 6.2678 - mean_absolute_percentage_error: 40.9733 - mean_squared_logarithmic_error: 0.1674 - root_mean_squared_log_error: 0.4021 - val_loss: 0.5358 - val_mean_absolute_percentage_error: 32.0227 - val_mean_squared_logarithmic_error: 0.0606 - val_root_mean_squared_log_error: 0.2442\n",
      "Epoch 2/100\n",
      "11/11 [==============================] - 0s 10ms/step - loss: 2.4740 - mean_absolute_percentage_error: 27.3895 - mean_squared_logarithmic_error: 0.0641 - root_mean_squared_log_error: 0.2495 - val_loss: 0.2043 - val_mean_absolute_percentage_error: 18.9347 - val_mean_squared_logarithmic_error: 0.0199 - val_root_mean_squared_log_error: 0.1386\n",
      "Epoch 3/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.7757 - mean_absolute_percentage_error: 16.5210 - mean_squared_logarithmic_error: 0.0213 - root_mean_squared_log_error: 0.1433 - val_loss: 0.0571 - val_mean_absolute_percentage_error: 9.0258 - val_mean_squared_logarithmic_error: 0.0048 - val_root_mean_squared_log_error: 0.0657\n",
      "Epoch 4/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.2275 - mean_absolute_percentage_error: 9.4086 - mean_squared_logarithmic_error: 0.0065 - root_mean_squared_log_error: 0.0791 - val_loss: 0.0156 - val_mean_absolute_percentage_error: 4.6988 - val_mean_squared_logarithmic_error: 0.0013 - val_root_mean_squared_log_error: 0.0345\n",
      "Epoch 5/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1931 - mean_absolute_percentage_error: 6.4587 - mean_squared_logarithmic_error: 0.0030 - root_mean_squared_log_error: 0.0542 - val_loss: 0.0080 - val_mean_absolute_percentage_error: 3.7139 - val_mean_squared_logarithmic_error: 8.1084e-04 - val_root_mean_squared_log_error: 0.0280\n",
      "Epoch 6/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.2254 - mean_absolute_percentage_error: 6.0072 - mean_squared_logarithmic_error: 0.0026 - root_mean_squared_log_error: 0.0506 - val_loss: 0.0084 - val_mean_absolute_percentage_error: 3.7842 - val_mean_squared_logarithmic_error: 8.4065e-04 - val_root_mean_squared_log_error: 0.0285\n",
      "Epoch 7/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.2216 - mean_absolute_percentage_error: 6.5192 - mean_squared_logarithmic_error: 0.0030 - root_mean_squared_log_error: 0.0547 - val_loss: 0.0109 - val_mean_absolute_percentage_error: 4.1273 - val_mean_squared_logarithmic_error: 9.8575e-04 - val_root_mean_squared_log_error: 0.0309\n",
      "Epoch 8/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.2067 - mean_absolute_percentage_error: 7.0679 - mean_squared_logarithmic_error: 0.0035 - root_mean_squared_log_error: 0.0591 - val_loss: 0.0126 - val_mean_absolute_percentage_error: 4.3290 - val_mean_squared_logarithmic_error: 0.0011 - val_root_mean_squared_log_error: 0.0323\n",
      "Epoch 9/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1960 - mean_absolute_percentage_error: 7.2851 - mean_squared_logarithmic_error: 0.0037 - root_mean_squared_log_error: 0.0609 - val_loss: 0.0123 - val_mean_absolute_percentage_error: 4.3005 - val_mean_squared_logarithmic_error: 0.0011 - val_root_mean_squared_log_error: 0.0321\n",
      "Epoch 10/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.1892 - mean_absolute_percentage_error: 7.1828 - mean_squared_logarithmic_error: 0.0037 - root_mean_squared_log_error: 0.0600 - val_loss: 0.0108 - val_mean_absolute_percentage_error: 4.1349 - val_mean_squared_logarithmic_error: 9.9462e-04 - val_root_mean_squared_log_error: 0.0310\n",
      "Epoch 11/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1845 - mean_absolute_percentage_error: 6.9358 - mean_squared_logarithmic_error: 0.0034 - root_mean_squared_log_error: 0.0580 - val_loss: 0.0094 - val_mean_absolute_percentage_error: 3.9670 - val_mean_squared_logarithmic_error: 9.2406e-04 - val_root_mean_squared_log_error: 0.0299\n",
      "Epoch 12/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.1811 - mean_absolute_percentage_error: 6.7116 - mean_squared_logarithmic_error: 0.0032 - root_mean_squared_log_error: 0.0562 - val_loss: 0.0084 - val_mean_absolute_percentage_error: 3.8846 - val_mean_squared_logarithmic_error: 8.8543e-04 - val_root_mean_squared_log_error: 0.0291\n",
      "Epoch 13/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1777 - mean_absolute_percentage_error: 6.5576 - mean_squared_logarithmic_error: 0.0031 - root_mean_squared_log_error: 0.0550 - val_loss: 0.0077 - val_mean_absolute_percentage_error: 3.8316 - val_mean_squared_logarithmic_error: 8.6827e-04 - val_root_mean_squared_log_error: 0.0285\n",
      "Epoch 14/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1736 - mean_absolute_percentage_error: 6.4392 - mean_squared_logarithmic_error: 0.0030 - root_mean_squared_log_error: 0.0540 - val_loss: 0.0071 - val_mean_absolute_percentage_error: 3.8050 - val_mean_squared_logarithmic_error: 8.6194e-04 - val_root_mean_squared_log_error: 0.0280\n",
      "Epoch 15/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.1693 - mean_absolute_percentage_error: 6.3180 - mean_squared_logarithmic_error: 0.0029 - root_mean_squared_log_error: 0.0530 - val_loss: 0.0066 - val_mean_absolute_percentage_error: 3.7783 - val_mean_squared_logarithmic_error: 8.6374e-04 - val_root_mean_squared_log_error: 0.0276\n",
      "Epoch 16/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1649 - mean_absolute_percentage_error: 6.1802 - mean_squared_logarithmic_error: 0.0028 - root_mean_squared_log_error: 0.0519 - val_loss: 0.0061 - val_mean_absolute_percentage_error: 3.7508 - val_mean_squared_logarithmic_error: 8.7543e-04 - val_root_mean_squared_log_error: 0.0271\n",
      "Epoch 17/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.1606 - mean_absolute_percentage_error: 6.0318 - mean_squared_logarithmic_error: 0.0026 - root_mean_squared_log_error: 0.0507 - val_loss: 0.0057 - val_mean_absolute_percentage_error: 3.7433 - val_mean_squared_logarithmic_error: 8.9826e-04 - val_root_mean_squared_log_error: 0.0268\n",
      "Epoch 18/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1564 - mean_absolute_percentage_error: 5.8823 - mean_squared_logarithmic_error: 0.0025 - root_mean_squared_log_error: 0.0494 - val_loss: 0.0054 - val_mean_absolute_percentage_error: 3.7481 - val_mean_squared_logarithmic_error: 9.3218e-04 - val_root_mean_squared_log_error: 0.0265\n",
      "Epoch 19/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1523 - mean_absolute_percentage_error: 5.7350 - mean_squared_logarithmic_error: 0.0024 - root_mean_squared_log_error: 0.0483 - val_loss: 0.0052 - val_mean_absolute_percentage_error: 3.7604 - val_mean_squared_logarithmic_error: 9.7688e-04 - val_root_mean_squared_log_error: 0.0264\n",
      "Epoch 20/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.1483 - mean_absolute_percentage_error: 5.5920 - mean_squared_logarithmic_error: 0.0023 - root_mean_squared_log_error: 0.0471 - val_loss: 0.0051 - val_mean_absolute_percentage_error: 3.7968 - val_mean_squared_logarithmic_error: 0.0010 - val_root_mean_squared_log_error: 0.0265\n",
      "Epoch 21/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.1441 - mean_absolute_percentage_error: 5.4466 - mean_squared_logarithmic_error: 0.0022 - root_mean_squared_log_error: 0.0459 - val_loss: 0.0051 - val_mean_absolute_percentage_error: 3.8627 - val_mean_squared_logarithmic_error: 0.0011 - val_root_mean_squared_log_error: 0.0268\n",
      "Epoch 22/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1401 - mean_absolute_percentage_error: 5.2935 - mean_squared_logarithmic_error: 0.0021 - root_mean_squared_log_error: 0.0447 - val_loss: 0.0052 - val_mean_absolute_percentage_error: 3.9442 - val_mean_squared_logarithmic_error: 0.0012 - val_root_mean_squared_log_error: 0.0273\n",
      "Epoch 23/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1362 - mean_absolute_percentage_error: 5.1388 - mean_squared_logarithmic_error: 0.0020 - root_mean_squared_log_error: 0.0434 - val_loss: 0.0054 - val_mean_absolute_percentage_error: 4.0559 - val_mean_squared_logarithmic_error: 0.0013 - val_root_mean_squared_log_error: 0.0279\n",
      "Epoch 24/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1324 - mean_absolute_percentage_error: 4.9873 - mean_squared_logarithmic_error: 0.0019 - root_mean_squared_log_error: 0.0422 - val_loss: 0.0057 - val_mean_absolute_percentage_error: 4.1948 - val_mean_squared_logarithmic_error: 0.0014 - val_root_mean_squared_log_error: 0.0286\n",
      "Epoch 25/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1287 - mean_absolute_percentage_error: 4.8387 - mean_squared_logarithmic_error: 0.0018 - root_mean_squared_log_error: 0.0410 - val_loss: 0.0061 - val_mean_absolute_percentage_error: 4.3481 - val_mean_squared_logarithmic_error: 0.0015 - val_root_mean_squared_log_error: 0.0294\n",
      "Epoch 26/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1251 - mean_absolute_percentage_error: 4.6932 - mean_squared_logarithmic_error: 0.0018 - root_mean_squared_log_error: 0.0399 - val_loss: 0.0067 - val_mean_absolute_percentage_error: 4.5073 - val_mean_squared_logarithmic_error: 0.0016 - val_root_mean_squared_log_error: 0.0303\n",
      "Epoch 27/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1215 - mean_absolute_percentage_error: 4.5472 - mean_squared_logarithmic_error: 0.0017 - root_mean_squared_log_error: 0.0387 - val_loss: 0.0073 - val_mean_absolute_percentage_error: 4.6927 - val_mean_squared_logarithmic_error: 0.0017 - val_root_mean_squared_log_error: 0.0314\n",
      "Epoch 28/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1181 - mean_absolute_percentage_error: 4.3983 - mean_squared_logarithmic_error: 0.0016 - root_mean_squared_log_error: 0.0375 - val_loss: 0.0080 - val_mean_absolute_percentage_error: 4.9074 - val_mean_squared_logarithmic_error: 0.0019 - val_root_mean_squared_log_error: 0.0326\n",
      "Epoch 29/100\n",
      "11/11 [==============================] - 0s 6ms/step - loss: 0.1148 - mean_absolute_percentage_error: 4.2504 - mean_squared_logarithmic_error: 0.0015 - root_mean_squared_log_error: 0.0363 - val_loss: 0.0088 - val_mean_absolute_percentage_error: 5.1590 - val_mean_squared_logarithmic_error: 0.0020 - val_root_mean_squared_log_error: 0.0340\n",
      "Epoch 30/100\n",
      "11/11 [==============================] - 0s 5ms/step - loss: 0.1116 - mean_absolute_percentage_error: 4.1070 - mean_squared_logarithmic_error: 0.0014 - root_mean_squared_log_error: 0.0352 - val_loss: 0.0096 - val_mean_absolute_percentage_error: 5.4351 - val_mean_squared_logarithmic_error: 0.0022 - val_root_mean_squared_log_error: 0.0356\n"
     ]
    }
   ],
   "source": [
    "from keras.layers.convolutional import Conv1D\n",
    "from keras.layers import Flatten, Dropout\n",
    "def model_cnn(look_back):\n",
    "    model=Sequential()\n",
    "    model.add(Conv1D(filters=20, kernel_size=1, input_shape=(1, look_back), activation='relu'))\n",
    "#     model.add(Dropout(rate=0.2))\n",
    "    model.add(Flatten())\n",
    "    model.add(Dense(1))\n",
    "    model.compile(loss='mean_squared_error',  optimizer='adam',metrics = [tf.keras.losses.MeanAbsolutePercentageError(), \n",
    "                                                                          tf.keras.losses.MeanSquaredLogarithmicError(),\n",
    "                                                                          root_mean_squared_log_error])\n",
    "    return model\n",
    "\n",
    "cnn_model=model_cnn(look_back)\n",
    "cnn_history=cnn_model.fit(trainX,trainY, epochs=100, batch_size=30, verbose=1, validation_data=(testX,testY),\n",
    "                          callbacks=[EarlyStopping(monitor='val_loss', patience=10)],shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "78a022e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Mean Absolute Percentage Error(MAPE): 1.96; Train Mean Squared Logarithmic Error(MSLE) : 0.00 ; Train Root Mean Squared Logarithmic Error(RMSLE) : 0.03 \n",
      "Test Mean Absolute Percentage Error(MAPE): 2.52; Test Mean Squared Logarithmic Error(MSLE) : 0.00 ; Test Root Mean Squared Logarithmic Error(RMSLE) : 0.04 \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cnn_train_score = cnn_model.evaluate(trainX, trainY, verbose=0)\n",
    "print('Train Mean Absolute Percentage Error(MAPE): %.2f; Train Mean Squared Logarithmic Error(MSLE) : %.2f ; Train Root Mean Squared Logarithmic Error(RMSLE) : %.2f ' \n",
    "% (np.sqrt(cnn_train_score[1]), cnn_train_score[2], cnn_train_score[3]))\n",
    "cnn_test_score = cnn_model.evaluate(testX, testY, verbose=0)\n",
    "print('Test Mean Absolute Percentage Error(MAPE): %.2f; Test Mean Squared Logarithmic Error(MSLE) : %.2f ; Test Root Mean Squared Logarithmic Error(RMSLE) : %.2f '  \n",
    "% (np.sqrt(cnn_test_score[1]), cnn_test_score[2], cnn_test_score[3]))\n",
    "model_loss(cnn_history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "adbd61cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cnn_test_predict = cnn_model.predict(testX)\n",
    "prediction_plot(testY, cnn_test_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "096e9cb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8944533858901751"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(testY, cnn_test_predict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "120d4de8",
   "metadata": {},
   "source": [
    "### Hybrid CNN-LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "276d7521",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_size = len(df_arr)-train_size\n",
    "train, test = df_arr[0:train_size,:], df_arr[train_size:len(df_arr),:]\n",
    "trainX, trainY = convert2matrix(train, look_back)\n",
    "testX, testY = convert2matrix(test, look_back)\n",
    "# reshape input to be [samples, time steps, features]\n",
    "trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\n",
    "testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "5368f0f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "11/11 [==============================] - 4s 72ms/step - loss: 16.3478 - mean_absolute_percentage_error: 39.8002 - mean_squared_logarithmic_error: 0.4368 - root_mean_squared_log_error: 0.4697 - val_loss: 0.4094 - val_mean_absolute_percentage_error: 25.4367 - val_mean_squared_logarithmic_error: 0.0270 - val_root_mean_squared_log_error: 0.1592\n",
      "Epoch 2/100\n",
      "11/11 [==============================] - 0s 13ms/step - loss: 426.2133 - mean_absolute_percentage_error: 78.5029 - mean_squared_logarithmic_error: 0.3638 - root_mean_squared_log_error: 0.4035 - val_loss: 0.6898 - val_mean_absolute_percentage_error: 37.9326 - val_mean_squared_logarithmic_error: 0.0866 - val_root_mean_squared_log_error: 0.2940\n",
      "Epoch 3/100\n",
      "11/11 [==============================] - 0s 14ms/step - loss: 5.8455 - mean_absolute_percentage_error: 37.0570 - mean_squared_logarithmic_error: 0.1287 - root_mean_squared_log_error: 0.3411 - val_loss: 1.2143 - val_mean_absolute_percentage_error: 49.8056 - val_mean_squared_logarithmic_error: 0.1672 - val_root_mean_squared_log_error: 0.4079\n",
      "Epoch 4/100\n",
      "11/11 [==============================] - 0s 13ms/step - loss: 4.0603 - mean_absolute_percentage_error: 36.8874 - mean_squared_logarithmic_error: 0.1231 - root_mean_squared_log_error: 0.3493 - val_loss: 0.5398 - val_mean_absolute_percentage_error: 33.4230 - val_mean_squared_logarithmic_error: 0.0649 - val_root_mean_squared_log_error: 0.2544\n",
      "Epoch 5/100\n",
      "11/11 [==============================] - 0s 14ms/step - loss: 0.1458 - mean_absolute_percentage_error: 5.6638 - mean_squared_logarithmic_error: 0.0033 - root_mean_squared_log_error: 0.0498 - val_loss: 0.0066 - val_mean_absolute_percentage_error: 4.0244 - val_mean_squared_logarithmic_error: 9.9524e-04 - val_root_mean_squared_log_error: 0.0284\n",
      "Epoch 6/100\n",
      "11/11 [==============================] - 0s 12ms/step - loss: 38.1026 - mean_absolute_percentage_error: 33.9710 - mean_squared_logarithmic_error: 0.1018 - root_mean_squared_log_error: 0.2498 - val_loss: 0.6472 - val_mean_absolute_percentage_error: 36.3415 - val_mean_squared_logarithmic_error: 0.0789 - val_root_mean_squared_log_error: 0.2803\n",
      "Epoch 7/100\n",
      "11/11 [==============================] - 0s 12ms/step - loss: 3.6639 - mean_absolute_percentage_error: 30.4339 - mean_squared_logarithmic_error: 0.0790 - root_mean_squared_log_error: 0.2799 - val_loss: 0.5374 - val_mean_absolute_percentage_error: 33.0309 - val_mean_squared_logarithmic_error: 0.0635 - val_root_mean_squared_log_error: 0.2514\n",
      "Epoch 8/100\n",
      "11/11 [==============================] - 0s 14ms/step - loss: 0.7906 - mean_absolute_percentage_error: 18.5290 - mean_squared_logarithmic_error: 0.0261 - root_mean_squared_log_error: 0.1608 - val_loss: 0.1796 - val_mean_absolute_percentage_error: 19.3224 - val_mean_squared_logarithmic_error: 0.0195 - val_root_mean_squared_log_error: 0.1393\n",
      "Epoch 9/100\n",
      "11/11 [==============================] - 0s 14ms/step - loss: 6.5330 - mean_absolute_percentage_error: 21.8699 - mean_squared_logarithmic_error: 0.0409 - root_mean_squared_log_error: 0.1834 - val_loss: 0.4282 - val_mean_absolute_percentage_error: 29.3134 - val_mean_squared_logarithmic_error: 0.0487 - val_root_mean_squared_log_error: 0.2200\n",
      "Epoch 10/100\n",
      "11/11 [==============================] - 0s 13ms/step - loss: 1.8970 - mean_absolute_percentage_error: 22.1610 - mean_squared_logarithmic_error: 0.0386 - root_mean_squared_log_error: 0.1957 - val_loss: 0.2633 - val_mean_absolute_percentage_error: 22.9981 - val_mean_squared_logarithmic_error: 0.0286 - val_root_mean_squared_log_error: 0.1685\n",
      "Epoch 11/100\n",
      "11/11 [==============================] - 0s 11ms/step - loss: 0.3796 - mean_absolute_percentage_error: 12.8916 - mean_squared_logarithmic_error: 0.0119 - root_mean_squared_log_error: 0.1088 - val_loss: 0.1185 - val_mean_absolute_percentage_error: 15.4324 - val_mean_squared_logarithmic_error: 0.0122 - val_root_mean_squared_log_error: 0.1101\n",
      "Epoch 12/100\n",
      "11/11 [==============================] - 0s 15ms/step - loss: 0.2402 - mean_absolute_percentage_error: 7.6397 - mean_squared_logarithmic_error: 0.0045 - root_mean_squared_log_error: 0.0636 - val_loss: 0.0813 - val_mean_absolute_percentage_error: 12.7080 - val_mean_squared_logarithmic_error: 0.0082 - val_root_mean_squared_log_error: 0.0901\n",
      "Epoch 13/100\n",
      "11/11 [==============================] - 0s 14ms/step - loss: 0.1361 - mean_absolute_percentage_error: 6.4171 - mean_squared_logarithmic_error: 0.0033 - root_mean_squared_log_error: 0.0533 - val_loss: 0.0687 - val_mean_absolute_percentage_error: 11.6094 - val_mean_squared_logarithmic_error: 0.0068 - val_root_mean_squared_log_error: 0.0822\n",
      "Epoch 14/100\n",
      "11/11 [==============================] - 0s 14ms/step - loss: 0.0626 - mean_absolute_percentage_error: 5.1434 - mean_squared_logarithmic_error: 0.0020 - root_mean_squared_log_error: 0.0421 - val_loss: 0.0474 - val_mean_absolute_percentage_error: 9.5734 - val_mean_squared_logarithmic_error: 0.0046 - val_root_mean_squared_log_error: 0.0676\n",
      "Epoch 15/100\n",
      "11/11 [==============================] - 0s 14ms/step - loss: 0.0468 - mean_absolute_percentage_error: 3.6180 - mean_squared_logarithmic_error: 0.0011 - root_mean_squared_log_error: 0.0300 - val_loss: 0.0321 - val_mean_absolute_percentage_error: 7.8166 - val_mean_squared_logarithmic_error: 0.0031 - val_root_mean_squared_log_error: 0.0552\n"
     ]
    }
   ],
   "source": [
    "from keras.layers import RepeatVector, MaxPooling1D\n",
    "def model_hbrd(look_back):\n",
    "    model=Sequential()\n",
    "    model.add(Conv1D(filters=100, kernel_size=1, input_shape=(1, look_back), activation='relu'))\n",
    "#     model.add(Dropout(rate=0.2))\n",
    "    model.add(Flatten())\n",
    "    model.add(RepeatVector(look_back))\n",
    "    model.add(LSTM(100, activation='relu')) #, dropout=0.2))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(loss='mean_squared_error',  optimizer='adam',metrics = [tf.keras.losses.MeanAbsolutePercentageError(), \n",
    "                                                                          tf.keras.losses.MeanSquaredLogarithmicError(),\n",
    "                                                                          root_mean_squared_log_error])\n",
    "    return model\n",
    "\n",
    "hbrd_model=model_hbrd(look_back)\n",
    "hbrd_history=hbrd_model.fit(trainX,trainY, epochs=100, batch_size=30, verbose=1, validation_data=(testX,testY),\n",
    "                            callbacks=[EarlyStopping(monitor='val_loss', patience=10)],shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "e4de8f8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Mean Absolute Percentage Error(MAPE): 1.76; Train Mean Squared Logarithmic Error(MSLE) : 0.00 ; Train Root Mean Squared Logarithmic Error(RMSLE) : 0.03 \n",
      "Test Mean Absolute Percentage Error(MAPE): 2.76; Test Mean Squared Logarithmic Error(MSLE) : 0.00 ; Test Root Mean Squared Logarithmic Error(RMSLE) : 0.05 \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "hbrd_train_score = hbrd_model.evaluate(trainX, trainY, verbose=0)\n",
    "print('Train Mean Absolute Percentage Error(MAPE): %.2f; Train Mean Squared Logarithmic Error(MSLE) : %.2f ; Train Root Mean Squared Logarithmic Error(RMSLE) : %.2f ' \n",
    "% (np.sqrt(hbrd_train_score[1]), hbrd_train_score[2], hbrd_train_score[3]))\n",
    "hbrd_test_score = hbrd_model.evaluate(testX, testY, verbose=0)\n",
    "print('Test Mean Absolute Percentage Error(MAPE): %.2f; Test Mean Squared Logarithmic Error(MSLE) : %.2f ; Test Root Mean Squared Logarithmic Error(RMSLE) : %.2f '  \n",
    "% (np.sqrt(hbrd_test_score[1]), hbrd_test_score[2], hbrd_test_score[3]))\n",
    "model_loss(hbrd_history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "6c69bc3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "hbrd_test_predict = hbrd_model.predict(testX)\n",
    "prediction_plot(testY, hbrd_test_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "7d661c69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6478802962362699"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(testY, hbrd_test_predict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daa9c849",
   "metadata": {},
   "source": [
    "### GRU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "59da111d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.layers import GRU\n",
    "from tensorflow.keras.optimizers import SGD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "ec76ca33",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_size = len(df_arr)-train_size\n",
    "train, test = df_arr[0:train_size,:], df_arr[train_size:len(df_arr),:]\n",
    "trainX, trainY = convert2matrix(train, look_back)\n",
    "testX, testY = convert2matrix(test, look_back)\n",
    "# reshape input to be [samples, time steps, features]\n",
    "trainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1], 1))\n",
    "testX = np.reshape(testX, (testX.shape[0], testX.shape[1], 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "43456bd7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\SAHIR\\AppData\\Roaming\\Python\\Python38\\site-packages\\keras\\optimizer_v2\\optimizer_v2.py:355: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "31/31 [==============================] - 10s 19ms/step - loss: 18.2788\n",
      "Epoch 2/100\n",
      "31/31 [==============================] - 1s 20ms/step - loss: 14.1929\n",
      "Epoch 3/100\n",
      "31/31 [==============================] - 1s 20ms/step - loss: 9.3154\n",
      "Epoch 4/100\n",
      "31/31 [==============================] - 1s 20ms/step - loss: 3.2349\n",
      "Epoch 5/100\n",
      "31/31 [==============================] - 1s 19ms/step - loss: 3.3109\n",
      "Epoch 6/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 1.8065\n",
      "Epoch 7/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 1.9481\n",
      "Epoch 8/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 3.2980\n",
      "Epoch 9/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.7369\n",
      "Epoch 10/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 3.1208\n",
      "Epoch 11/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.3158\n",
      "Epoch 12/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 2.1485\n",
      "Epoch 13/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.9585\n",
      "Epoch 14/100\n",
      "31/31 [==============================] - 1s 16ms/step - loss: 3.4063\n",
      "Epoch 15/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 2.7126\n",
      "Epoch 16/100\n",
      "31/31 [==============================] - 1s 16ms/step - loss: 1.9157\n",
      "Epoch 17/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.0074\n",
      "Epoch 18/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 3.0868\n",
      "Epoch 19/100\n",
      "31/31 [==============================] - 1s 19ms/step - loss: 3.2972\n",
      "Epoch 20/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 2.2351\n",
      "Epoch 21/100\n",
      "31/31 [==============================] - 1s 20ms/step - loss: 1.3769\n",
      "Epoch 22/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.2943\n",
      "Epoch 23/100\n",
      "31/31 [==============================] - 1s 16ms/step - loss: 0.7002\n",
      "Epoch 24/100\n",
      "31/31 [==============================] - 1s 16ms/step - loss: 1.9743\n",
      "Epoch 25/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.7855\n",
      "Epoch 26/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.7408\n",
      "Epoch 27/100\n",
      "31/31 [==============================] - 1s 16ms/step - loss: 0.8134\n",
      "Epoch 28/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.1652\n",
      "Epoch 29/100\n",
      "31/31 [==============================] - 1s 16ms/step - loss: 0.6628: 0s - loss: 0.72\n",
      "Epoch 30/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.9630\n",
      "Epoch 31/100\n",
      "31/31 [==============================] - ETA: 0s - loss: 1.358 - 1s 18ms/step - loss: 1.2977\n",
      "Epoch 32/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.6658\n",
      "Epoch 33/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.0872\n",
      "Epoch 34/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 1.3949\n",
      "Epoch 35/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.7229\n",
      "Epoch 36/100\n",
      "31/31 [==============================] - 1s 16ms/step - loss: 1.1675\n",
      "Epoch 37/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.8555\n",
      "Epoch 38/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.5979\n",
      "Epoch 39/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.7051\n",
      "Epoch 40/100\n",
      "31/31 [==============================] - 1s 16ms/step - loss: 2.0669\n",
      "Epoch 41/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 3.4362\n",
      "Epoch 42/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.9920\n",
      "Epoch 43/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.0750\n",
      "Epoch 44/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.6054\n",
      "Epoch 45/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.6414\n",
      "Epoch 46/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.5114\n",
      "Epoch 47/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.5266\n",
      "Epoch 48/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.1816\n",
      "Epoch 49/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.4498\n",
      "Epoch 50/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 1.0991\n",
      "Epoch 51/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.7658: 0s - loss: 0.9\n",
      "Epoch 52/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.5169\n",
      "Epoch 53/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.3653\n",
      "Epoch 54/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.5199\n",
      "Epoch 55/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.6772: 0s - loss: 0\n",
      "Epoch 56/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.7395\n",
      "Epoch 57/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.8893\n",
      "Epoch 58/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.5268\n",
      "Epoch 59/100\n",
      "31/31 [==============================] - 1s 19ms/step - loss: 0.5502\n",
      "Epoch 60/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.6916\n",
      "Epoch 61/100\n",
      "31/31 [==============================] - 1s 19ms/step - loss: 1.2323\n",
      "Epoch 62/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.8324\n",
      "Epoch 63/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.6612\n",
      "Epoch 64/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.6000\n",
      "Epoch 65/100\n",
      "31/31 [==============================] - 1s 16ms/step - loss: 0.6038\n",
      "Epoch 66/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.6751\n",
      "Epoch 67/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.6978\n",
      "Epoch 68/100\n",
      "31/31 [==============================] - 1s 19ms/step - loss: 0.5175\n",
      "Epoch 69/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.7508\n",
      "Epoch 70/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 1.2955\n",
      "Epoch 71/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.9654\n",
      "Epoch 72/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.6689\n",
      "Epoch 73/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.8068\n",
      "Epoch 74/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.5253\n",
      "Epoch 75/100\n",
      "31/31 [==============================] - 1s 19ms/step - loss: 0.5185\n",
      "Epoch 76/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.5283\n",
      "Epoch 77/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.5469\n",
      "Epoch 78/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.5131\n",
      "Epoch 79/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.6926\n",
      "Epoch 80/100\n",
      "31/31 [==============================] - 1s 19ms/step - loss: 0.6489\n",
      "Epoch 81/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.6200\n",
      "Epoch 82/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.0456: 0s - loss: 1.09\n",
      "Epoch 83/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.6445\n",
      "Epoch 84/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.6638\n",
      "Epoch 85/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.9078: 0s - loss: 0.926\n",
      "Epoch 86/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.0497\n",
      "Epoch 87/100\n",
      "31/31 [==============================] - 0s 16ms/step - loss: 1.8155\n",
      "Epoch 88/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.8550\n",
      "Epoch 89/100\n",
      "31/31 [==============================] - 1s 19ms/step - loss: 0.5816\n",
      "Epoch 90/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.7929\n",
      "Epoch 91/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.4545\n",
      "Epoch 92/100\n",
      "31/31 [==============================] - 1s 20ms/step - loss: 1.2850\n",
      "Epoch 93/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.9374\n",
      "Epoch 94/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 0.7580\n",
      "Epoch 95/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 0.8478\n",
      "Epoch 96/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.3880\n",
      "Epoch 97/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 1.3787\n",
      "Epoch 98/100\n",
      "31/31 [==============================] - 1s 18ms/step - loss: 1.0412\n",
      "Epoch 99/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31/31 [==============================] - 1s 18ms/step - loss: 1.6662\n",
      "Epoch 100/100\n",
      "31/31 [==============================] - 1s 17ms/step - loss: 1.0009\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x20618e94910>"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(GRU(units=50, return_sequences=True, input_shape=((trainX.shape[1], 1)), activation='tanh'))\n",
    "model.add(Dropout(0.2))\n",
    "# Third GRU layer\n",
    "model.add(GRU(units=50, return_sequences=True,activation='tanh'))\n",
    "model.add(Dropout(0.2))\n",
    "# Fourth GRU layer\n",
    "model.add(GRU(units=50, activation='tanh'))\n",
    "model.add(Dropout(0.2))\n",
    "# The output layer\n",
    "model.add(Dense(units=1))\n",
    "# Compiling the RNN\n",
    "model.compile(optimizer=SGD(lr=0.01, decay=1e-7, momentum=0.9, nesterov=False),loss='mean_squared_error')\n",
    "# Fitting to the training set\n",
    "model.fit(trainX,trainY,epochs=100,batch_size=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "e553e453",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:5 out of the last 13 calls to <function Model.make_predict_function.<locals>.predict_function at 0x0000020620863040> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n",
      "[[2.73 2.58]\n",
      " [2.73 2.57]\n",
      " [2.73 2.57]\n",
      " [2.73 2.56]\n",
      " [2.73 2.56]\n",
      " [2.73 2.54]\n",
      " [2.73 2.53]\n",
      " [2.72 2.53]\n",
      " [2.72 2.52]\n",
      " [2.72 2.52]\n",
      " [2.72 2.52]\n",
      " [2.72 2.5 ]\n",
      " [2.72 2.49]\n",
      " [2.72 2.48]\n",
      " [2.72 2.46]\n",
      " [2.72 2.46]\n",
      " [2.72 2.45]\n",
      " [2.72 2.44]\n",
      " [2.72 2.43]\n",
      " [2.72 2.42]\n",
      " [2.71 2.41]\n",
      " [2.71 2.4 ]\n",
      " [2.71 2.4 ]\n",
      " [2.71 2.39]\n",
      " [2.71 2.37]\n",
      " [2.71 2.37]\n",
      " [2.71 2.37]\n",
      " [2.71 2.35]\n",
      " [2.71 2.31]\n",
      " [2.71 2.31]\n",
      " [2.71 2.3 ]\n",
      " [2.71 2.3 ]\n",
      " [2.71 2.3 ]\n",
      " [2.7  2.27]\n",
      " [2.7  2.24]\n",
      " [2.7  2.24]\n",
      " [2.7  2.23]\n",
      " [2.7  2.23]\n",
      " [2.7  2.23]\n",
      " [2.7  2.18]\n",
      " [2.7  2.17]\n",
      " [2.7  2.16]\n",
      " [2.7  2.16]\n",
      " [2.69 2.13]\n",
      " [2.69 2.11]\n",
      " [2.69 2.11]\n",
      " [2.69 2.11]\n",
      " [2.69 2.1 ]\n",
      " [2.69 2.1 ]\n",
      " [2.69 2.07]\n",
      " [2.69 2.07]\n",
      " [2.69 2.02]\n",
      " [2.69 2.02]\n",
      " [2.69 2.01]\n",
      " [2.69 2.01]\n",
      " [2.69 1.98]\n",
      " [2.68 1.96]\n",
      " [2.68 1.92]\n",
      " [2.68 1.91]\n",
      " [2.68 1.87]\n",
      " [2.68 1.85]\n",
      " [2.68 1.81]\n",
      " [2.68 1.79]\n",
      " [2.68 1.78]\n",
      " [2.68 1.77]\n",
      " [2.68 1.71]\n",
      " [2.67 1.65]\n",
      " [2.67 1.63]\n",
      " [2.67 1.56]\n",
      " [2.67 1.55]\n",
      " [2.67 1.44]\n",
      " [2.67 1.41]]\n"
     ]
    }
   ],
   "source": [
    "y_pred = model.predict(testX)\n",
    "np.set_printoptions(precision=2)\n",
    "print(np.concatenate((y_pred.reshape(len(y_pred),1), testY.reshape(len(testY),1)),1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "014b823d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.812981144578195"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(testY, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6429d97c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
